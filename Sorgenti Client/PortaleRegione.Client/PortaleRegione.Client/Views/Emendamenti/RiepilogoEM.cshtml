@using PortaleRegione.DTO.Enum
@using PortaleRegione.DTO.Model
@model PortaleRegione.Client.Models.EmendamentiViewModel

<style>
    tr {
        border: unset;
    }

    td {
        text-align: center;
    }
</style>

@{
    ViewBag.Title = string.Format("{0} {1}", Model.Atto.TIPI_ATTO.Tipo_Atto, Model.Atto.NAtto);

    var view = HttpUtility.ParseQueryString(Request.Url.Query).Get("view");

    if (string.IsNullOrEmpty(view))
    {
        view = "grid";
    }
}

<div class="row">
    <div class="col l1 s2">
        <a class="btn-floating waves-effect waves-light grey header-back" href="@Url.Action("RiepilogoAtti", "Atti", new {id = Model.Atto.UIDSeduta})">
            <i class="material-icons">arrow_back</i>
        </a>
    </div>
    <div class="col l11 s10">
        <h5>
            <b>@ViewBag.Title</b>
        </h5>
    </div>
</div>

<div id="emendamentiTable" class="row">
    @{
        if (Model.Mode == ClientModeEnum.TRATTAZIONE)
        {
            var classActiveTabPresentazione = "";
            var classActiveTabVotazione = "";

            var ordineFromCache = HttpContext.Current.Cache.Get("OrdinamentoEM");

            var ordinePagina = HttpUtility.ParseQueryString(Request.Url.Query).Get("ordine");
            OrdinamentoEnum ordinePaginaEnum;
            if (!string.IsNullOrEmpty(ordinePagina))
            {
                ordinePaginaEnum = (OrdinamentoEnum)Convert.ToInt16(ordinePagina);
            }
            else if (ordineFromCache != null)
            {
                ordinePaginaEnum = (OrdinamentoEnum)ordineFromCache;
            }
            else
            {
                ordinePaginaEnum = OrdinamentoEnum.Presentazione;
            }

            switch (ordinePaginaEnum)
            {
                case OrdinamentoEnum.Presentazione:
                case OrdinamentoEnum.Default:
                    classActiveTabPresentazione = "active";
                    break;
                case OrdinamentoEnum.Votazione:
                    classActiveTabVotazione = "active";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }


            <ul id="RiepilogoEmendamentiTabs" class="tabs tabs-fixed-width">
                <li class="tab col s3">
                    <a class="@classActiveTabPresentazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Presentazione})')">Ordine Presentazione</a>
                </li>
                <li class="tab col s3">
                    <a class="@classActiveTabVotazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Votazione})')">Ordine Votazione</a>
                </li>
            </ul>
        }
        Html.RenderPartial("_PaginationBar", Model.Data.Paging);
        Html.RenderPartial("_Command_RiepilogoEM", new CommandRiepilogoEMModel { view = view, IsAdmin = false });

        if (view == "grid")
        {
            Html.RenderPartial("_GridView_RiepilogoEM", Model);
        }
        if (view == "zoom")
        {
            Html.RenderPartial("_ZoomView_RiepilogoEM", Model);
        }
    }
</div>

@{
    Html.RenderPartial("_ComandiMassivi", Model.Atto.Chiuso);
    Html.RenderPartial("_PannelloStrumentiRicerche");
}

<div id="modalStampa" class="modal">
    <div class="modal-content">
        <h5 id="emStampaDisplayName"></h5>
        <p>Stai per generare la stampa degli emendamenti selezionati. Sei sicuro?</p>
        @using (Html.BeginForm("NuovaStampa", "Stampe", FormMethod.Post, new { id = "formStampa" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Atto.UIDAtto)
            <input id="hdOrdine" name="Ordine" type="hidden" value="@((int) OrdinamentoEnum.Presentazione)" />
            <div class="form-group">
                <label>Dall' emendamento in posizione:</label>
                <input id="txtDa" name="Da" type="number" class="form-control" value="1" min="1" />
            </div>
            <div class="form-group">
                <label>All' emendamento in posizione:</label>
                <input id="txtA" name="A" type="number" class="form-control" />
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaStampa" class="btn blue">Genera stampa</a>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(document).ready(function() {
            checkSelectedEM();
        });

        $('#btnCreaEM').attr('href', '@Url.Action("NuovoEmendamento", new {id = Model.Atto.UIDAtto})');

        function ConfirmStampa() {
            $("#emStampaDisplayName").empty();

            var documentiTotali = $("#hdTotaleDocumenti").val();
            var selezionaTutti = getSelezionaTutti();
            var listaEM = getListaEmendamenti();
            var totaleDoc = selezionaTutti ? documentiTotali - listaEM.length : listaEM.length;

            if (totaleDoc <= 0) {
                ErrorAlert("Seleziona almeno un emendamento da stampare");
                return;
            }

            $("#txtA").val(totaleDoc);
            $("#txtA").prop("max", totaleDoc);

            $("#emStampaDisplayName").append("GENERA FASCICOLO EMENDAMENTI (TOTALE EM DA ESPORTARE: " + totaleDoc + ")");

            $("#modalStampa").modal("open");
            $("#btnConfermaStampa").on("click",
                function () {
                    $("#formStampa").submit();
                });
        }

        $("#formStampa").submit(function (e) {
            e.preventDefault();
        }).validate({
            submitHandler: function (form) {
                var obj = {};

                obj.param = {
                    UIDAtto: $("#Atto_UIDAtto").val(),
                    Da: $("#txtDa").val(),
                    A: $("#txtA").val(),
                    Ordine: $("#hdOrdine").val()
                };
                var lstEM = getListaEmendamenti();
                if (lstEM.length > 0) {
                    obj.filtro = [];
                    var selezionaTutti = getSelezionaTutti();
                    for (var i = 0; i < lstEM.length; i++) {
                        obj.filtro.push({
                            PropertyId: "UIDEM",
                            Operation: selezionaTutti ? 5 : 1,
                            Value: lstEM[i],
                            Connector: 1
                        });
                    }
                }

                //submit via ajax
                $.ajax({
                    url: baseUrl + "/stampe/nuova",
                    type: "POST",
                    data: JSON.stringify(obj),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                }).done(function (data) {
                    console.log("success", data);
                    if (data.message)
                        ErrorAlert(data.message);
                    else
                        SuccessAlert("Vai alla gestione stampe per controllare se la tua stampa è pronta", data);

                    setListaEmendamenti([]);
                    setSelezionaTutti(false);
                }).fail(function (err) {
                    console.log("error", err);
                    ErrorAlert(err.message);
                });

                return false; //This doesn't prevent the form from submitting.
            }
        });

        function RevealFirmaDepositoMassivo(action) {
            var text = "";
            var button = "";

            var documentiTotali = $("#hdTotaleDocumenti").val();
            var selezionaTutti = getSelezionaTutti();
            var listaEM = getListaEmendamenti();
            var totaleDoc = selezionaTutti ? documentiTotali - listaEM.length : listaEM.length;

            if (totaleDoc <= 0) {
                ErrorAlert("Seleziona almeno un emendamento da elaborare");
                return;
            }

            if (action == 3) {
                text = "Inserisci il PIN per firmare ";
                button = "Firma";
            } else if (action == 4) {
                text = "Inserisci il PIN per depositare ";
                button = "Deposita";
            }

            text = text + totaleDoc + " emendamenti";
            swal(text,
                {
                    content: {
                        element: "input",
                        attributes: { placeholder: "******", className: "password" }
                    },
                    buttons: { cancel: "Annulla", confirm: button }
                })
                .then((value) => {
                    if (value == null || value == "")
                        return;

                    var obj = {};
                    obj.Pin = value;
                    obj.Azione = action;
                    obj.ListaEmendamenti = listaEM.length > 0 ? listaEM : [];
                    obj.AttoUId = '@Model.Atto.UIDAtto';
                    obj.Mode = @((int)Model.Mode);

                    $.ajax({
                            url: baseUrl + "/emendamenti/azioni-massive",
                            type: "POST",
                            data: JSON.stringify(obj),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json"
                        }).done(function (data) {
                            alert(JSON.stringify(data))
                            if (data.message) {
                                ErrorAlert(data.message);
                            } else {
                                go(data);
                            }
                        }).fail(function (err) {
                            console.log("error", err);
                            ErrorAlert(err.message);
                        });
                });
        }


    </script>
}